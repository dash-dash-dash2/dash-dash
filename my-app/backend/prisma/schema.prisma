// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the Role enum
enum Role {
  CUSTOMER
  DELIVERYMAN
  RESTAURANT_OWNER
  ADMIN
}

// User Table (Central entity for all users)
model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String
  phone         String?
  address       String?
  location      String?
  imageUrl      String?
  role          Role         @default(CUSTOMER) // Role of the user
  banned        Boolean      @default(false) // Add banned field
  deliverymanId Int? // Foreign key to Deliveryman (optional)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[] // One-to-many relationship with Order
  ratings       Rating[] // One-to-many relationship with Rating
  chats         Chat[] // One-to-many relationship with Chat
  deliveryman   Deliveryman? @relation("UserDeliveryman") // Optional relation to Deliveryman
  restaurants   Restaurant[] @relation("UserRestaurants") // One-to-many relationship with Restaurant
}

// Deliveryman Table (Role-specific fields)
model Deliveryman {
  id            Int            @id @default(autoincrement())
  vehicleType   String
  isAvailable   Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation("UserDeliveryman", fields: [userId], references: [id]) // One-to-one relationship with User
  userId        Int?           @unique // Make userId optional
  orders        Order[] // One-to-many relationship with Order
  notifications Notification[] // One-to-many relationship with Notification
  chats         Chat[] // One-to-many relationship with Chat
}

// Restaurant Table (Role-specific fields)
model Restaurant {
  id          Int                  @id @default(autoincrement())
  name        String
  cuisineType String
  location    String? // Latitude and longitude (e.g., "48.8566,2.3522")
  imageUrl    String? // Add imageUrl field
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation("UserRestaurants", fields: [userId], references: [id]) // One-to-one relationship with User
  userId      Int // Foreign key to User
  orders      Order[] // One-to-many relationship with Order
  menus       Menu[] // One-to-many relationship with Menu
  ratings     Rating[] // One-to-many relationship with Rating
  categories  CategoryRestaurant[] // Many-to-many relationship with Category
}

// Order Table
model Order {
  id            Int          @id @default(autoincrement())
  userId        Int
  restaurantId  Int
  deliverymanId Int?
  status        String       @default("Pending")
  totalAmount   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  deliveryman   Deliveryman? @relation(fields: [deliverymanId], references: [id])

  // New fields for order items
  menuId       Int // Reference to the menu item
  quantity     Int // Quantity of the menu item
  price        Float // Price of the menu item
  supplements  Supplement[]   @relation("OrderSupplements")
  deliveryCost Float          @default(5) // Fixed delivery cost
  Chat         Chat[]
  Notification Notification[]
  Payment      Payment[]
  OrderHistory OrderHistory[]
}

// Chat Table (Real-time chat between user and driver)
model Chat {
  id            Int          @id @default(autoincrement())
  orderId       Int
  userId        Int? // Make optional if user can be null
  deliverymanId Int? // Make optional if deliveryman can be null
  message       String
  sender        String // "user" or "deliveryman"
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  order         Order        @relation(fields: [orderId], references: [id])
  user          User?        @relation(fields: [userId], references: [id]) // Make optional
  deliveryman   Deliveryman? @relation(fields: [deliverymanId], references: [id]) // Make optional
}

// Notification Table
model Notification {
  id            Int         @id @default(autoincrement())
  deliverymanId Int
  orderId       Int
  message       String
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  deliveryman   Deliveryman @relation(fields: [deliverymanId], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
}

// Category-Restaurant Table (Many-to-many relationship)
model CategoryRestaurant {
  id           Int        @id @default(autoincrement())
  categoryId   Int // Foreign key to Category
  restaurantId Int // Foreign key to Restaurant
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  category     Category   @relation(fields: [categoryId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

// Category Table (e.g., Italian, Mexican, etc.)
model Category {
  id          Int                  @id @default(autoincrement())
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  restaurants CategoryRestaurant[] // Many-to-many relationship with Restaurant
}

// Supplement Table (e.g., extra cheese, sauces)
model Supplement {
  id     Int     @id @default(autoincrement())
  name   String
  price  Float
  orders Order[] @relation("OrderSupplements")
  menus  Menu[]  @relation("MenuSupplements") // Define the relationship with Menu
}

// Menu Table (Restaurant menus)
model Menu {
  id           Int          @id @default(autoincrement())
  name         String
  description  String? // Add description field
  price        Float // Add price field
  imageUrl     String? // Add imageUrl field
  restaurantId Int // Foreign key to Restaurant
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id]) // One-to-one relationship with Restaurant
  supplements  Supplement[] @relation("MenuSupplements") // Define the relationship with Supplement
}

// Rating Table (User ratings for restaurants)
model Rating {
  id           Int        @id @default(autoincrement())
  score        Int // e.g., 1 to 5
  comment      String?
  userId       Int // Foreign key to User
  restaurantId Int // Foreign key to Restaurant
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

// Payment Table (Order payments)
model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  amount        Float
  paymentMethod String // e.g., "Credit Card", "Debit Card"
  status        String // e.g., "Pending", "Completed"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  order         Order    @relation(fields: [orderId], references: [id])
}

// Admin Table (Platform administrators)
model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String // Hashed using Bcrypt
  imageUrl  String? // Add imageUrl field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// OrderHistory Table (History of orders)
model OrderHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int // Foreign key to Order
  status    String // e.g., "Pending", "Preparing", "Out for Delivery", "Delivered"
  updatedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
}
